Message queuing is an important facet of any microservice architcture. It is a way of excahnging data betwwen proccess,
applications and servers. RabbitMQ is one of the most widely used message brokers in the world,
boasting over 35000 production deployments across both startus and big enterprises alike.

RabbitMQ is a message queuing software also known as a meesage broker or queue manager.
Simply put, it is a software where queues can defined,
and applications may connect and transfer a message onto it.
Message queues enable asynchronous and consuming messages interact with the queue instead of communicating directly with each other.

A meessage can include any information. It could, for example, contain information about process or job that should start on another application,
possibly even on another server, or it might be a simple text message.

The message broker stores the messages until a reeiving application connects and consumers a message off the queue.
The receiving application then appropriatyly processes the message.
A message producer adds messages to a queue without having to wait for them to be processed

Example:

Amessage broker can act as middleman for variout services. A broker can be used to reduce loads and delivery times by web application servers.
A task that would generally take a lot of time to process can be delegated to a third party whose only job is to perform them.

Example is application about pdf generator. The application allows users to upload information to a website 
The website handles the information and generates a PDF which ts then emailed back to the user. The whole processing this example takes several seconds to perform

When the uses has entered user information into the web interface,
the web application puts a "pdf processing" job into a message, including information about the job such as name and email.
The message is then placed onto a queue defined in RabbitmQ using an exchange process.
The underlying architecture of message queue is simple -client applications called producers create messages and deliver them to the broker
The broker is, essentially, the message queue. Other applications known as consumers, connect to the queue and subscribe to messages from the broker,
processing those messages accroding to their fucntion.
The software interating with the broker can be a producer, a consumer or both. 
Messages placed in the queue are stored untilthe consumer retrieves them

If the pdf processing applicatin crashes or if many pdf request are coming at the same times,
message would continue to pile up in the queue until the consumer starts again.
it would then process all the messsages, one by one.

WHY AND WHEN TO USE RABBITMQ

Message queuing allows web servers to respond to request in their own time instead of being forced to perform resource-heavy procedures immediately.
Message queuing is also useful for distributing a message to multiple recipients for consumption or when balancing the load between workers/

The consumer application removes a messages from the queue and processes the pdf at the same time as the producer pushes new task messages to the queue. the consumer cn be on an entirely different server then the publisher or they can be created in one programming language and handled in another programming langrage, 
as the two applications only communicate through the messges they are sending to eeach other.
The two services have what is know as low coupling betwwen the sender and the receiver

Example:
1. The user sends pdf create request to the web application
2. The web application ( the producer ) sends a message to RabbitmQ that includes data from the request, such as name and email.
3. An exchange accepts the messages from a producer application and routes them to correct message queues.
4. The pdf processor ( the consumer ) receives the job message from the queue and starts the processing of the pdf

EXCHANGES

Messages are not pushlished directly to a queue instead, the producer sends a message to an exchange. The job of an exchange is to accept messages from the producer applications and route them to the correct messge queues. it does this with the hlep bindings and routing keys. A binding is a link between a queue and an exchange

Messages Flow in RabbitMQ
1. The producer publishes a message to an exchange. When creating an exchange, its type must be specified. The different types of exchanges are explained in the detail later on in this book.
2. The exchage receives the message and is now responsible for the routing of the message. The exchange looks at different message attributes andkeys depending on the exchange type.
3. In this case, we see two bindings to two different queues from the exchange. The exchange routes the message to the correct queue, depending on theese attributes/
4. The message stay in the queue until the consumer processes them.
5. The consumer then removes the message from the queue once handled

TYPES OF EXCHANGES

More in-depth understanding of the different exchange types, binding keys, routing keys.

direct: a direct exchange delivers message to queues basedon a message "routing key". 
In direct exchange, the message is routed to the queue with the exact match of binding key as the routing key of the message.
For example, if the queue is bound to the exchange using the binding key " pdfprocess ",  a message published to the exchange wuith a routing key " pdfprocess" is routed to that queue.

topic the topic exchange performs a wild match betwwen the routing key and routing pattern specified in the binding.

Fanout: a fanout exchanges routes messages to all of the queues that are bound to it.

Headers- A header exchange uses the message header attributes for routing purpose

RABBITMQ AND SERVER CONCEPTS

Below are some inportant concepts that are helpful to know we dig deeper into RabbitMQ. The default virtual host, the default user, and the default permissions are used in the example that below

Producer - Application that sends the messages
Consumer - Applicatin that receives the messages
Queue - Buffer that stores messages
Message - Data sent from producer to consumer through RabbitMQ
Connection - TCP connection between the application and the RabbitMQ broker
Channel - A virtual connection inside a connection. when publishing or consuming messages or subscribing to a queue it's all done over channel
Exchnage- Recevies messages from producers and pushes them to queues depending on rules difined by ehe exchange type.
A queue needs to be bound to at least one exchange to be able to receive messages
Binding- Link between a queue and an exchange
Routing key - The key that the exchange looks at to decide how to route the message to queues.
Think the routing key as the destination address of a message
AMQP advanced message queueing protocol - the primaty protocol used by RabbitMQ for messaging/
Users - It's possible to connect to RabbitMQ with a given username and passowrd, with assigned permissions such as rights to read, write and configure. 
Users can also be assigned permissions to specfic virtual hosts
Vhost - virtual host or Vhost segregate applications that are using the same RabbitMQ instance. Different users can have different access privilegees to different vhosts and queues, and exchanges can be created so that they only exist in one vhost
acknowledgmetnts and confirms: indicators that messages have been received or acted upon. Acknowledgement can be used in both directions.
a consumer can indicate to the server that it has received/precessed a message, and the server culd report the same thing to the producer

Publish and consumer messages

RabbitMQ speaks the AMQP protocol by default, and to be able to communicte with RabbitMQ, a library that understands the same protocol should be used. A
To communicate with RabbitMQ The methods should be used when connection to the RabbitMQ broker using the given parameter hostname, port number 
when declaring a queue or an exchange There is a choice of libraries for all major programming languages
1. First of all we need to setup/ create a connection object
Here the username, password, connection URL, port, etc, .. are specfied. A TCP connection will be set up between the application and RabbitMQ
2. Second a chanel needs to be opened. The connection interface helps you accomplish that. 
You are now readdy to send and receive messages
3. Declare/create a queue. Declaring a queue will cause it to be created if it does not already exist. All queues need to be declred before they can be used
4. Set up exchanges and bind a queue to an exchange. Messages are only routed to a queue if the queue is bound to an exchange
5. Publish a message to an exchane and consume a message from the queue
6. close the chanel and the connection

What are exchanges, bindings, and routing keys?
In what way are exchenges and queues associated with each other?
When should they be used and how?

Messages are not published directly to a queue instead
the producer sends messages to an exchange.
Exchanges are message routing agents, living in a virtual host ( vhost ) within RabbitMQ
Exchanges accept messages from the producer application and route them to message queues with the help of header attributes bindings, and routing keys

A binding is la link configured to make a connection betwwen a queue and an exchange.
The routing key is a message attribute.
the exchange misht look at the routing key, depending on exchange type, when deciding on ow to route the message to the correct queue

Exchangesm connection and queues cn be configured to include properties such as durable tmporary and auto delete upon creation

In RabbitMQ four different types of exchanges route the message differently using different parameters and bindings setups.

Direct Exchange: a direct exchage delivers messages to queues based on routing key. 
The routing key is a message attribute addesd to the messge by the producer
Think of the routing key as an address that exchange uses to decide on how to route that message
A message goes to the queues that have or has the exact match in binding key to the routing key of the message
The direct exchanget type is useful to distinguish messages published to the same exchange using string identifier

Queue A ( create_pdf_queue ) is bound to a direct exchange ( pdf_events )
with the binding key ( pdf_create )
When a new message with the routing key ( pdf_create ) arrives at the direct exchange, the exchange routes it to the queu ewhere the binding_key = routing_key

Example1: 
Exchange: pdf_events
queue A: create_pdf_queue
binding key between exchange ( pdf_events ) and queue A ( create_pdf_queue ): pdf_create

example2:
Exchange: pdf_events
Queue B: pdf_log_queue
binding key between exchange ( pdf_events ) and Queue B ( pdf_log_queue ) : pfd_log

A message with the routing key pdf_log is sent to the exchange pdf_events. the message is routed to create_log_queue because the routing key ( pdf_log )
matcher the binding key ( pdf_log )

note: if the message routing key does not matchany binding key, the message is discarded

The default exchange AMQP brokers must provide for the direct exchange is "amp.direct"

default exchange:
The default exchange is a pre-declared direct excahnge with no name, usually referred to with the empty string, "". when using the default exchange the message is delivered to the queue with the name equal to the routing key of the message.
Every queue is automatically bound to the default exchange with routing key that matches the queue name.

TOPIC EXCHANGE